program Project6;

{$APPTYPE CONSOLE}

type
    TArr = record
    MyArray: array [2..8] of Int64;
end;

function FindNumber(i: Byte): Int64;
var
    Number, Prev, Step: Int64;
    Digit: Byte;
begin
    Prev := 0;
    Digit := i;
    Number := i;
    Step := 10;
    repeat
        Number := Number + Step * (Digit * 2 mod 10 + Prev);
        Prev := Digit * 2 div 10;
        Digit := Number div Step;
        Step := Step * 10;
    until (Digit = i) and (Prev = 0);
    FindNumber := Number;
end;

function FindNewNumber(Num: Int64): Int64;
var
    Strg: String;
    Code: Integer;
    Numer: Int64;
begin
    str(Num,Strg);
    Delete(Strg,1,1);
    val(Strg, Numer, Code);
    FindNewNumber := Numer;
end;

function GetArray(A: int64): TArr;
var
    i: Byte;
    MyArr: array [2..8] of Int64;
begin
    Writeln('This program searches for the smallest number, which, when you rearrange the last digit to the first one, is twice as large as the original');
    Writeln('This is the list of required numbers : ');
    for i := 2 to 8 do
    begin
        A := FindNumber(i);
        MyArr[i] := FindNewNumber(A);
        Writeln(i,' : ',MyArr[i]);
        Result.MyArray[i] := MyArr[i];
    end;
end;

procedure ShowAnswer(A: TArr);
var
    Min: Int64;
    i: Byte;
begin
    Min := A.MyArray[8];
    for i := 2 to 8 do
        if A.MyArray[i] < Min then
            Min := A.MyArray[i];
    Writeln('Minimum required number is : ', Min);
    Readln;
end;

procedure Main();
var
    Num: Int64;
    NumArr: TArr;
begin
    NumArr := GetArray(Num);
    ShowAnswer(NumArr);
end;

begin
    Main;
end.
