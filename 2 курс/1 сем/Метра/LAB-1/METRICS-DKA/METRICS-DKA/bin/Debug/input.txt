#include<iostream>
#include<algorithm>
#include<conio.h>
#include<random>
#include<time.h>

using namespace std;

void quickSort(int arr[], int left, int right) 
{
      int i = left;
      int j = right;
      //initialize
      int tmp;
      int pivot = arr[(left + right) / 2];
      while (i <= j) 
	  {
            while (arr[i] < pivot)
			{
                  i++;
			}
            while (arr[j] > pivot)
			{
                  j--;
			}
            if (i <= j) 
			{
                  tmp = arr[i];
                  arr[i] = arr[j];
                  arr[j] = tmp;
                  i++;
                  j--;
			}
      };

      if (left < j)
	  {
            quickSort(arr, left, j);
	  }
      if (i < right)
	  {
            quickSort(arr, i, right);
	  }
	  return;
}

void SortByBubble(int mas[1000], int size)
{
	int i = 0;
	int j = 0;
	for(; i < size; i++)
	{
		j = 0;
		for(; j < size - 1; j++)
		{
			if(mas[j] > mas[j + 1])
			{
				int buf;
				buf = mas[j];
				mas[j] = mas[j + 1];
				mas[j + 1] = buf;
			}
		}
	}
}

void SortByInsert(int mas[1000], int size)
{
	int count[100];
	int i = 0;
	int j = 0;
	for(; i < 100; i++)
		count[i] = 0;
	i = 0;
	for(; i < size; i++)
		count[mas[i]]++;
	i = 0;
	j = 0;
	for(; i < 100; i++)
		while(count[i])
		{
			count[i]--;
			mas[j] = i;
			j++;
		}
}

void SortByRevers(int mas[1000], int size)
{
	int i = 0;
	int j = 0;
	int maximum = 1000;
	int position = -1;
	for(; i < size; i++)
	{
		maximum = mas[0];
		position = 0;
		j = 1;
		for(; j < size - i; j++)
		{
			if(maximum < mas[j])
			{
				maximum = mas[j];
				position = j;
			}
		}
		int buf;
		buf = mas[position];
		mas[position] = mas[size - i - 1];
		mas[size - i - 1] = buf;	
	}
}

void ShellSort(int mas[1000], int size)
{
	int i;
	int j;
	int k;
	int t;
	for(k = size/2; k > 0; k /=2)
	{
        for(i = k; i < size; i++)
        {
            t = mas[i];
            for(j = i; j>=k; j-=k)
            {
                if(t < mas[j-k])
                    mas[j] = mas[j-k];
            }
            mas[j] = t;
        }
	}
}

int main()
{
	int n;
	int i;
	int mas[1000];
	printf("Enter the size of array: ");
	scanf("%d", &n);
	i = 0;
	for(; i < n; i++)
		mas[i] = rand() % 20 + 1;
	printf("Source array:");
	i = 0;
	for(; i < n; i++)
		printf("%d ", mas[i]);
	printf("\n");
	printf("Sorted by bubble: ");
	SortByBubble(mas, n);
	i = 0;
	for(; i < n; i++)
		printf("%d ", mas[i]);

	printf("\n\n\n");

	i = 0;
	for(; i < n; i++)
		mas[i] = rand() % 20 + 1;
	printf("Source array:");
	i = 0;
	for(; i < n; i++)
		printf("%d ", mas[i]);
	printf("\n");
	printf("Sorted by inserts: ");
	SortByInsert(mas, n);
	i = 0;
	for(; i < n; i++)
		printf("%d ", mas[i]);

	printf("\n\n\n");

	i = 0;
	for(; i < n; i++)
		mas[i] = rand() % 20 + 1;
	printf("Source array:");
	i = 0;
	for(; i < n; i++)
		printf("%d ", mas[i]);
	printf("\n");
	printf("Sorted by reverses: ");
	SortByRevers(mas, n);
	i = 0;
	for(; i < n; i++)
		printf("%d ", mas[i]);
	printf("\n");
	
	printf("\n\n\n");

	i = 0;
	for(; i < n; i++)
		mas[i] = rand() % 20 + 1;
	printf("Source array:");
	i = 0;
	for(; i < n; i++)
		printf("%d ", mas[i]);
	printf("\n");
	printf("Sorted by Shell: ");
	ShellSort(mas, n);
	i = 0;
	for(; i < n; i++)
		printf("%d ", mas[i]);
	printf("\n");
	int x = (((5)));
	getch();
	
	//map<int, char> m;
	SortByBubble();
	return 0;
}